---
/**
 * Repository Card Component
 * 
 * Displays repository information with CRUD actions including:
 * - Repository metadata (name, description, team size, dates)
 * - Action buttons (view, edit, delete)
 * - Status indicators and progress
 * - Theme-responsive styling
 * 
 * Team Input Incorporated:
 * - Architect-Engineer: Clean component architecture
 * - Tester-Reviewer: Accessibility and error handling
 * - Optimizer-Watchdog: Performance optimizations
 * - Morale-Catalyst: Engaging visual elements
 * - Scrum-Knowledge: Clear information hierarchy
 * 
 * @props repository - Repository data object
 * 
 * @author Aurorion Teams Collective
 * @version 1.0.0
 */

import type { Repository } from '../types';

export interface Props {
  repository: Repository;
}

const { repository } = Astro.props;

// Calculate team stats
const teamSize = repository.team.length;
const activeMembers = repository.team.filter(member => member.status === 'active').length;
const pendingMembers = repository.team.filter(member => member.status === 'pending').length;

// Format dates
const createdDate = new Date(repository.createdAt).toLocaleDateString();
const updatedDate = new Date(repository.updatedAt).toLocaleDateString();
const isRecentlyUpdated = (Date.now() - new Date(repository.updatedAt).getTime()) < 24 * 60 * 60 * 1000;

// Determine status
const getRepoStatus = () => {
  if (teamSize === 0) return { text: 'Setup Required', class: 'setup' };
  if (pendingMembers > 0) return { text: 'In Progress', class: 'progress' };
  if (activeMembers === teamSize) return { text: 'Active', class: 'active' };
  return { text: 'Mixed Status', class: 'mixed' };
};

const status = getRepoStatus();
---

<!-- Repository Card -->
<article class="repo-card" data-repo-id={repository.id}>
  <!-- Card Header -->
  <header class="card-header">
    <div class="repo-info">
      <h3 class="repo-name" title={repository.name}>
        {repository.name}
      </h3>
      <div class="repo-meta">
        <span class="team-size" aria-label={`Team size: ${teamSize} members`}>
          üë• {teamSize} {teamSize === 1 ? 'member' : 'members'}
        </span>
        <span class={`repo-status ${status.class}`} aria-label={`Repository status: ${status.text}`}>
          {status.text}
        </span>
        {isRecentlyUpdated && (
          <span class="recent-badge" aria-label="Recently updated">
            üÜï New
          </span>
        )}
      </div>
    </div>
    
    <!-- Quick Actions -->
    <div class="card-actions">
      <button 
        class="action-btn view-btn" 
        data-action="view"
        aria-label={`View ${repository.name} repository`}
        title="View Repository"
      >
        üëÅÔ∏è
      </button>
      <button 
        class="action-btn edit-btn" 
        data-action="edit"
        aria-label={`Edit ${repository.name} repository`}
        title="Edit Repository"
      >
        ‚úèÔ∏è
      </button>
      <button 
        class="action-btn delete-btn" 
        data-action="delete"
        aria-label={`Delete ${repository.name} repository`}
        title="Delete Repository"
      >
        üóëÔ∏è
      </button>
    </div>
  </header>

  <!-- Card Content -->
  <div class="card-content">
    <!-- Description -->
    {repository.description ? (
      <p class="repo-description" title={repository.description}>
        {repository.description}
      </p>
    ) : (
      <p class="repo-description empty">
        No description provided
      </p>
    )}

    <!-- Team Composition Preview -->
    {teamSize > 0 && (
      <div class="team-preview">
        <h4 class="team-preview-title">Team Composition</h4>
        <div class="team-stats">
          {activeMembers > 0 && (
            <span class="stat active">
              ‚úÖ {activeMembers} Active
            </span>
          )}
          {pendingMembers > 0 && (
            <span class="stat pending">
              ‚è≥ {pendingMembers} Pending
            </span>
          )}
          {repository.team.filter(m => m.status === 'standby').length > 0 && (
            <span class="stat standby">
              üí§ {repository.team.filter(m => m.status === 'standby').length} Standby
            </span>
          )}
        </div>
      </div>
    )}

    <!-- Agent Role Pills (for non-empty teams) -->
    {teamSize > 0 && (
      <div class="agent-roles">
        <h4 class="sr-only">Agent Roles in Team</h4>
        <div class="role-pills">
          {repository.team.slice(0, 3).map(member => (
            <span class="role-pill" title={`${member.roleId} - ${member.status}`}>
              {member.roleId.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}
            </span>
          ))}
          {teamSize > 3 && (
            <span class="role-pill more">
              +{teamSize - 3} more
            </span>
          )}
        </div>
      </div>
    )}
  </div>

  <!-- Card Footer -->
  <footer class="card-footer">
    <div class="repo-dates">
      <span class="created-date" title={`Created: ${createdDate}`}>
        üìÖ Created {createdDate}
      </span>
      {updatedDate !== createdDate && (
        <span class="updated-date" title={`Last updated: ${updatedDate}`}>
          üîÑ Updated {updatedDate}
        </span>
      )}
    </div>
    
    <!-- Primary Action Button -->
    <button 
      class="btn btn-primary view-repo-btn"
      data-action="view"
      aria-label={`Open ${repository.name} repository`}
    >
      {teamSize === 0 ? 'Setup Team' : 'Manage Team'}
    </button>
  </footer>
</article>

<style>
  /* ========================================
     REPOSITORY CARD BASE STYLES
     ======================================== */
  
  .repo-card {
    background: var(--card-bg);
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-md);
    border: 2px solid transparent;
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    height: 100%;
    overflow: hidden;
    position: relative;
  }
  
  .repo-card:hover {
    transform: translateY(-3px);
    box-shadow: var(--shadow-lg);
    border-color: var(--primary-color);
  }
  
  .repo-card:focus-within {
    outline: 2px solid var(--primary-color);
    outline-offset: 2px;
  }
  
  /* ========================================
     CARD HEADER STYLES
     ======================================== */
  
  .card-header {
    padding: var(--spacing-lg);
    border-bottom: 1px solid var(--border-color);
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: var(--spacing-md);
  }
  
  .repo-info {
    flex: 1;
    min-width: 0; /* Allow text truncation */
  }
  
  .repo-name {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--text-color);
    margin: 0 0 var(--spacing-sm) 0;
    line-height: 1.3;
    /* Text truncation for long names */
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  
  .repo-meta {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-sm);
    align-items: center;
  }
  
  .team-size {
    font-size: 0.9rem;
    color: var(--text-muted);
    font-weight: 500;
  }
  
  .repo-status {
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }
  
  .repo-status.setup {
    background: #fef3c7;
    color: #92400e;
  }
  
  .repo-status.progress {
    background: #dbeafe;
    color: #1e40af;
  }
  
  .repo-status.active {
    background: #d1fae5;
    color: #065f46;
  }
  
  .repo-status.mixed {
    background: #f3e8ff;
    color: #7c3aed;
  }
  
  .recent-badge {
    background: var(--primary-color);
    color: white;
    padding: 2px 6px;
    border-radius: 8px;
    font-size: 0.7rem;
    font-weight: 600;
    animation: pulse 2s infinite;
  }
  
  /* ========================================
     CARD ACTIONS STYLES
     ======================================== */
  
  .card-actions {
    display: flex;
    gap: var(--spacing-xs);
  }
  
  .action-btn {
    background: var(--section-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    padding: var(--spacing-sm);
    cursor: pointer;
    font-size: 1rem;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
  }
  
  .action-btn:hover {
    transform: scale(1.1);
    box-shadow: var(--shadow-sm);
  }
  
  .action-btn:focus {
    outline: 2px solid var(--primary-color);
    outline-offset: 2px;
  }
  
  .view-btn:hover {
    background: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
  }
  
  .edit-btn:hover {
    background: var(--warning-color);
    color: white;
    border-color: var(--warning-color);
  }
  
  .delete-btn:hover {
    background: var(--danger-color);
    color: white;
    border-color: var(--danger-color);
  }
  
  /* ========================================
     CARD CONTENT STYLES
     ======================================== */
  
  .card-content {
    padding: var(--spacing-lg);
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
  }
  
  .repo-description {
    color: var(--text-muted);
    line-height: 1.5;
    margin: 0;
    font-size: 0.95rem;
    /* Multi-line text truncation */
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .repo-description.empty {
    font-style: italic;
    opacity: 0.7;
  }
  
  /* ========================================
     TEAM PREVIEW STYLES
     ======================================== */
  
  .team-preview {
    margin-top: auto;
  }
  
  .team-preview-title {
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--text-color);
    margin: 0 0 var(--spacing-sm) 0;
  }
  
  .team-stats {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-xs);
  }
  
  .stat {
    font-size: 0.8rem;
    padding: 2px 6px;
    border-radius: 8px;
    font-weight: 500;
  }
  
  .stat.active {
    background: #d1fae5;
    color: #065f46;
  }
  
  .stat.pending {
    background: #fef3c7;
    color: #92400e;
  }
  
  .stat.standby {
    background: #f1f5f9;
    color: #475569;
  }
  
  /* ========================================
     AGENT ROLES STYLES
     ======================================== */
  
  .agent-roles {
    margin-top: var(--spacing-sm);
  }
  
  .role-pills {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-xs);
  }
  
  .role-pill {
    background: var(--primary-color);
    color: white;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 500;
    white-space: nowrap;
  }
  
  .role-pill.more {
    background: var(--text-muted);
  }
  
  /* ========================================
     CARD FOOTER STYLES
     ======================================== */
  
  .card-footer {
    padding: var(--spacing-lg);
    border-top: 1px solid var(--border-color);
    background: var(--section-bg);
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: var(--spacing-md);
  }
  
  .repo-dates {
    display: flex;
    flex-direction: column;
    gap: 2px;
    font-size: 0.8rem;
    color: var(--text-muted);
    flex: 1;
    min-width: 0;
  }
  
  .created-date,
  .updated-date {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .view-repo-btn {
    font-size: 0.9rem;
    padding: var(--spacing-sm) var(--spacing-md);
    white-space: nowrap;
  }
  
  /* ========================================
     PRICE IS RIGHT THEME ENHANCEMENTS
     ======================================== */
  
  .price-is-right .repo-card {
    border: 2px solid var(--border-color);
    transform: rotate(-0.5deg);
    position: relative;
    overflow: visible;
  }
  
  .price-is-right .repo-card:nth-child(even) {
    transform: rotate(0.5deg);
  }
  
  .price-is-right .repo-card:hover {
    transform: rotate(0deg) translateY(-3px);
  }
  
  .price-is-right .repo-card::before {
    content: '‚≠ê';
    position: absolute;
    top: -10px;
    right: -10px;
    font-size: 1.5rem;
    animation: sparkle 2s infinite;
    z-index: 10;
  }
  
  .price-is-right .recent-badge {
    animation: bounce 1s infinite;
  }
  
  .price-is-right .action-btn:hover {
    animation: pulse 0.5s ease-out;
  }
  
  .price-is-right .view-repo-btn {
    animation: pulse 2s infinite;
  }
  
  /* ========================================
     RESPONSIVE DESIGN
     ======================================== */
  
  @media (max-width: 768px) {
    .card-header {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--spacing-sm);
    }
    
    .card-actions {
      align-self: flex-end;
    }
    
    .card-footer {
      flex-direction: column;
      align-items: stretch;
      gap: var(--spacing-sm);
    }
    
    .view-repo-btn {
      width: 100%;
    }
    
    .repo-dates {
      text-align: center;
    }
  }
  
  /* ========================================
     ACCESSIBILITY IMPROVEMENTS
     ======================================== */
  
  @media (prefers-reduced-motion: reduce) {
    .recent-badge,
    .price-is-right .recent-badge,
    .price-is-right .view-repo-btn {
      animation: none;
    }
  }
</style>

<script>
  /**
   * Repository Card Interactive Functionality
   * 
   * Handles:
   * - Action button interactions (view, edit, delete)
   * - Confirmation dialogs for destructive actions
   * - Navigation to repository management pages
   * - Event delegation for dynamic cards
   * 
   * Team Input:
   * - Tester-Reviewer: Proper confirmation dialogs and error handling
   * - Optimizer-Watchdog: Event delegation for performance
   * - Technical Enablement: Type-safe event handling
   */
  
  class RepositoryCardManager {
    constructor() {
      this.initializeEventListeners();
    }
    
    /**
     * Initialize event listeners using delegation for better performance
     */
    initializeEventListeners() {
      // Use event delegation on document for dynamic cards
      document.addEventListener('click', (e) => this.handleCardAction(e));
    }
    
    /**
     * Handle card action button clicks
     */
    handleCardAction(event) {
      const target = event.target;
      const action = target.getAttribute('data-action');
      
      if (!action) return;
      
      const card = target.closest('.repo-card');
      const repoId = card?.getAttribute('data-repo-id');
      const repoName = card?.querySelector('.repo-name')?.textContent;
      
      if (!card || !repoId) return;
      
      event.preventDefault();
      event.stopPropagation();
      
      switch (action) {
        case 'view':
          this.viewRepository(repoId, repoName);
          break;
        case 'edit':
          this.editRepository(repoId, repoName);
          break;
        case 'delete':
          this.deleteRepository(repoId, repoName);
          break;
        default:
          console.warn('Unknown action:', action);
      }
    }
    
    /**
     * View repository details and team management
     */
    viewRepository(repoId, repoName) {
      console.log(`Viewing repository: ${repoName} (${repoId})`);
      
      // TODO: Navigate to repository management page
      // For now, show placeholder
      this.showNotification(`üìä Opening ${repoName} management interface...`, 'info');
      
      // Future implementation:
      // window.location.href = `/repository/${repoId}`;
    }
    
    /**
     * Edit repository settings
     */
    editRepository(repoId, repoName) {
      console.log(`Editing repository: ${repoName} (${repoId})`);
      
      // TODO: Open edit modal with current repository data
      // For now, show placeholder
      this.showNotification(`‚úèÔ∏è Edit functionality for ${repoName} coming soon!`, 'info');
      
      // Future implementation:
      // window.repositoryEditModal?.open(repoId);
    }
    
    /**
     * Delete repository with confirmation
     */
    async deleteRepository(repoId, repoName) {
      // Show confirmation dialog
      const confirmed = await this.showConfirmDialog(
        'Delete Repository',
        `Are you sure you want to delete "${repoName}"? This action cannot be undone.`,
        'Delete',
        'danger'
      );
      
      if (!confirmed) return;
      
      try {
        // TODO: Implement actual deletion logic
        console.log(`Deleting repository: ${repoName} (${repoId})`);
        
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Remove card from DOM with animation
        const card = document.querySelector(`[data-repo-id="${repoId}"]`);
        if (card) {
          card.style.animation = 'fadeOut 0.5s ease-out forwards';
          setTimeout(() => {
            card.remove();
            this.checkEmptyState();
          }, 500);
        }
        
        this.showNotification(`üóëÔ∏è Repository "${repoName}" deleted successfully!`, 'success');
        
        // Dispatch deletion event
        window.dispatchEvent(new CustomEvent('repositoryDeleted', {
          detail: { repoId, repoName }
        }));
        
      } catch (error) {
        console.error('Failed to delete repository:', error);
        this.showNotification(`‚ùå Failed to delete ${repoName}. Please try again.`, 'error');
      }
    }
    
    /**
     * Show confirmation dialog
     */
    showConfirmDialog(title, message, confirmText, type = 'primary') {
      return new Promise((resolve) => {
        // Create modal dialog
        const dialog = document.createElement('div');
        dialog.className = 'confirm-dialog-backdrop';
        dialog.innerHTML = `
          <div class="confirm-dialog">
            <div class="confirm-header">
              <h3>${title}</h3>
            </div>
            <div class="confirm-content">
              <p>${message}</p>
            </div>
            <div class="confirm-actions">
              <button class="btn btn-secondary cancel-btn">Cancel</button>
              <button class="btn btn-${type} confirm-btn">${confirmText}</button>
            </div>
          </div>
        `;
        
        // Add styles
        dialog.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          width: 100vw;
          height: 100vh;
          background: rgba(0, 0, 0, 0.6);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 1001;
          padding: var(--spacing-md);
        `;
        
        const dialogContent = dialog.querySelector('.confirm-dialog');
        dialogContent.style.cssText = `
          background: var(--container-bg);
          border-radius: var(--border-radius-lg);
          box-shadow: var(--shadow-lg);
          max-width: 400px;
          width: 100%;
        `;
        
        const header = dialog.querySelector('.confirm-header');
        header.style.cssText = `
          padding: var(--spacing-lg);
          border-bottom: 1px solid var(--border-color);
        `;
        
        const content = dialog.querySelector('.confirm-content');
        content.style.cssText = `
          padding: var(--spacing-lg);
          color: var(--text-muted);
          line-height: 1.6;
        `;
        
        const actions = dialog.querySelector('.confirm-actions');
        actions.style.cssText = `
          padding: var(--spacing-lg);
          display: flex;
          gap: var(--spacing-md);
          justify-content: flex-end;
          border-top: 1px solid var(--border-color);
        `;
        
        // Event listeners
        dialog.querySelector('.cancel-btn').addEventListener('click', () => {
          document.body.removeChild(dialog);
          resolve(false);
        });
        
        dialog.querySelector('.confirm-btn').addEventListener('click', () => {
          document.body.removeChild(dialog);
          resolve(true);
        });
        
        // Close on backdrop click
        dialog.addEventListener('click', (e) => {
          if (e.target === dialog) {
            document.body.removeChild(dialog);
            resolve(false);
          }
        });
        
        // Close on escape
        const escapeHandler = (e) => {
          if (e.key === 'Escape') {
            document.body.removeChild(dialog);
            document.removeEventListener('keydown', escapeHandler);
            resolve(false);
          }
        };
        document.addEventListener('keydown', escapeHandler);
        
        document.body.appendChild(dialog);
        dialog.querySelector('.confirm-btn').focus();
      });
    }
    
    /**
     * Show notification message
     */
    showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.textContent = message;
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: var(--${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'primary'}-color);
        color: white;
        padding: var(--spacing-lg);
        border-radius: var(--border-radius-lg);
        box-shadow: var(--shadow-lg);
        z-index: 1002;
        animation: slideInNotification 0.5s ease-out;
        max-width: 300px;
      `;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.style.animation = 'slideOutNotification 0.5s ease-in';
        setTimeout(() => {
          if (notification.parentNode) {
            document.body.removeChild(notification);
          }
        }, 500);
      }, 3000);
    }
    
    /**
     * Check if repository list is empty and show empty state
     */
    checkEmptyState() {
      const repoGrid = document.getElementById('repo-grid');
      const cards = repoGrid?.querySelectorAll('.repo-card');
      const emptyState = document.getElementById('empty-state');
      
      if (cards && cards.length === 0 && emptyState) {
        emptyState.style.display = 'block';
      }
    }
  }
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    window.repositoryCardManager = new RepositoryCardManager();
  });
  
  // Add fade out animation
  const fadeOutStyles = document.createElement('style');
  fadeOutStyles.textContent = `
    @keyframes fadeOut {
      from {
        opacity: 1;
        transform: scale(1);
      }
      to {
        opacity: 0;
        transform: scale(0.95);
      }
    }
  `;
  document.head.appendChild(fadeOutStyles);
</script>