---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="AI Models - Aurorion Teams">
  <div class="models-container">
    <!-- Header Section -->
    <header class="models-header">
      <h1>
        <svg class="header-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
        </svg>
        AI Model Management
      </h1>
      <div class="header-info">
        <span>Manage and monitor your local AI models</span>
      </div>
    </header>

    <!-- Status Grid -->
    <div class="status-grid">
      <!-- Provider Status -->
      <div class="widget provider-status">
        <h2>
          <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
          </svg>
          Provider Status
        </h2>
        <div class="status-content">
          <div class="status-item">
            <span class="label">AI Provider</span>
            <span id="ollama-status" class="value">Checking...</span>
          </div>
          <div id="status-indicator" class="status-dot"></div>
        </div>
      </div>

      <!-- Model Metrics -->
      <div class="widget model-metrics">
        <h2>
          <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
          </svg>
          Model Metrics
        </h2>
        <div class="metrics-content">
          <div class="metric">
            <span class="label">Total Models</span>
            <span id="model-count" class="value">0</span>
          </div>
          <div class="metric">
            <span class="label">Total Size</span>
            <span id="total-size" class="value">0 GB</span>
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="widget quick-actions">
        <h2>
          <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
          </svg>
          Quick Actions
        </h2>
        <div class="actions-content">
          <button id="refresh-btn" class="action-btn primary">
            <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Refresh Models
          </button>
          <button id="download-recommended" class="action-btn secondary">
            <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
            </svg>
            Download Recommended
          </button>
        </div>
      </div>
    </div>

    <!-- Models List -->
    <div class="widget models-list large-widget">
      <h2>
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
        </svg>
        Installed Models
      </h2>
      <div id="models-container" class="models-content">
        <div class="loading-state">Loading models...</div>
      </div>
    </div>

    <!-- Recommended Models -->
    <div class="widget recommended-models large-widget">
      <h2>
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path>
        </svg>
        Cloudflare AI Models for Aurorion Teams
      </h2>
      <div class="recommendations-grid">
        <div class="recommendation-card">
          <div class="card-content">
            <h3>@cf/meta/llama-3.1-8b-instruct</h3>
            <p class="role">Architect-Engineer Agent</p>
            <p class="description">Advanced reasoning and code generation with 8B parameters</p>
            <span class="size">Status: Always Available (Cloud)</span>
          </div>
          <button class="test-cf-model action-btn small" data-model="@cf/meta/llama-3.1-8b-instruct">
            <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            Test
          </button>
        </div>
        
        <div class="recommendation-card">
          <div class="card-content">
            <h3>@cf/baai/bge-base-en-v1.5</h3>
            <p class="role">Embedding & Search</p>
            <p class="description">768-dimensional embeddings for semantic search</p>
            <span class="size">Status: Always Available (Cloud)</span>
          </div>
          <button class="test-cf-model action-btn small" data-model="@cf/baai/bge-base-en-v1.5">
            <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            Test
          </button>
        </div>

        <div class="recommendation-card">
          <div class="card-content">
            <h3>@cf/baai/bge-reranker-base</h3>
            <p class="role">Search Optimization</p>
            <p class="description">Reranks search results for better accuracy</p>
            <span class="size">Status: Always Available (Cloud)</span>
          </div>
          <button class="test-cf-model action-btn small" data-model="@cf/baai/bge-reranker-base">
            <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            Test
          </button>
        </div>

        <div class="recommendation-card">
          <div class="card-content">
            <h3>@cf/microsoft/phi-2</h3>
            <p class="role">Lightweight Reasoning</p>
            <p class="description">Efficient 2.7B parameter model for quick tasks</p>
            <span class="size">Status: Always Available (Cloud)</span>
          </div>
          <button class="test-cf-model action-btn small" data-model="@cf/microsoft/phi-2">
            <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            Test
          </button>
        </div>
      </div>
    </div>
  </div>

  <style>
    .models-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 2rem;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: calc(100vh - 200px);
      border-radius: var(--border-radius-lg);
      box-shadow: var(--shadow-lg);
    }

    .models-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
      background: rgba(255, 255, 255, 0.1);
      padding: 1.5rem;
      border-radius: 12px;
      backdrop-filter: blur(10px);
    }

    .models-header h1 {
      color: white;
      margin: 0;
      font-size: 2.5rem;
      font-weight: 700;
    }

    .header-info {
      color: rgba(255, 255, 255, 0.9);
      font-size: 1.1rem;
    }

    .status-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .widget {
      background: rgba(255, 255, 255, 0.95);
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .widget h2 {
      margin: 0 0 1rem 0;
      color: #2d3748;
      font-size: 1.3rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .large-widget {
      grid-column: 1 / -1;
      margin-top: 1rem;
    }

    .header-icon {
      width: 2rem;
      height: 2rem;
      color: white;
    }

    .icon {
      width: 1.25rem;
      height: 1.25rem;
      color: #4a5568;
    }

    .btn-icon {
      width: 1rem;
      height: 1rem;
      margin-right: 0.5rem;
    }

    .status-content {
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .status-item {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .status-dot {
      width: 1rem;
      height: 1rem;
      border-radius: 50%;
      background: #cbd5e0;
    }

    .status-dot.online { background: #48bb78; }
    .status-dot.local { background: #ed8936; }
    .status-dot.offline { background: #f56565; }
    .status-dot.lmstudio { background: #9f7aea; }

    .metrics-content, .actions-content {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .metric {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.5rem 0;
      border-bottom: 1px solid #edf2f7;
    }

    .metric:last-child {
      border-bottom: none;
    }

    .label {
      color: #4a5568;
      font-weight: 500;
    }

    .value {
      font-weight: 700;
      color: #2d3748;
    }

    .action-btn {
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      text-align: center;
    }

    .action-btn.primary {
      background: #4299e1;
      color: white;
    }

    .action-btn.primary:hover {
      background: #3182ce;
      transform: translateY(-2px);
    }

    .action-btn.secondary {
      background: #48bb78;
      color: white;
    }

    .action-btn.secondary:hover {
      background: #38a169;
      transform: translateY(-2px);
    }

    .action-btn.small {
      padding: 0.5rem 1rem;
      font-size: 0.875rem;
      background: #e2e8f0;
      color: #2d3748;
    }

    .action-btn.small:hover {
      background: #cbd5e0;
      transform: translateY(-1px);
    }

    .models-content {
      max-height: 400px;
      overflow-y: auto;
    }

    .loading-state {
      text-align: center;
      padding: 2rem;
      color: #718096;
      font-style: italic;
    }

    .model-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 1rem;
      border-bottom: 1px solid #edf2f7;
      background: #f7fafc;
      margin-bottom: 0.5rem;
      border-radius: 8px;
    }

    .model-info h3 {
      margin: 0 0 0.25rem 0;
      color: #2d3748;
      font-weight: 600;
    }

    .model-info p {
      margin: 0;
      font-size: 0.875rem;
      color: #4a5568;
    }

    .model-actions {
      display: flex;
      gap: 0.5rem;
    }

    .recommendations-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 1rem;
    }

    .recommendation-card {
      background: #f7fafc;
      border-radius: 8px;
      padding: 1rem;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      border: 1px solid #e2e8f0;
    }

    .card-content h3 {
      margin: 0 0 0.5rem 0;
      color: #2d3748;
      font-weight: 600;
    }

    .role {
      color: #4299e1;
      font-weight: 600;
      font-size: 0.875rem;
      margin: 0 0 0.5rem 0;
    }

    .description {
      color: #4a5568;
      font-size: 0.875rem;
      margin: 0 0 1rem 0;
      line-height: 1.4;
    }

    .size {
      color: #718096;
      font-size: 0.75rem;
      font-weight: 500;
      margin-bottom: 1rem;
      display: block;
    }

    @media (max-width: 768px) {
      .models-container {
        padding: 1rem;
      }
      
      .models-header {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
      }
      
      .status-grid {
        grid-template-columns: 1fr;
      }
      
      .recommendations-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>

  <script>
    const CLOUDFLARE_AI_URL = 'http://localhost:8788'; // Local Cloudflare AI Worker
    const OLLAMA_BASE_URL = 'http://ollama.homedevenv.com';
    const LMSTUDIO_URL = 'http://localhost:1234';
    
    let currentProvider = null;
    let currentBaseUrl = null;
    
    async function checkModelProviders() {
      const statusElement = document.getElementById('ollama-status');
      const indicatorElement = document.getElementById('status-indicator');
      
      // Check Cloudflare AI Worker first (priority for Aurorion Teams)
      try {
        const cfResponse = await fetch(`${CLOUDFLARE_AI_URL}/api/models`);
        if (cfResponse.ok) {
          statusElement.textContent = 'Cloudflare AI';
          indicatorElement.className = 'status-dot online';
          currentProvider = 'cloudflare';
          currentBaseUrl = CLOUDFLARE_AI_URL;
          return 'cloudflare';
        }
      } catch (error) {
        console.log('Cloudflare AI Worker not available on port 8787');
      }
      
      // Check LM Studio (port 1234)
      try {
        const lmResponse = await fetch(`${LMSTUDIO_URL}/v1/models`);
        if (lmResponse.ok) {
          statusElement.textContent = 'LM Studio';
          indicatorElement.className = 'status-dot lmstudio';
          currentProvider = 'lmstudio';
          currentBaseUrl = LMSTUDIO_URL;
          return 'lmstudio';
        }
      } catch (error) {
        console.log('LM Studio not available on port 1234');
      }
      
      // Check Ollama external
      try {
        const response = await fetch(`${OLLAMA_BASE_URL}/api/version`);
        if (response.ok) {
          statusElement.textContent = 'Ollama Online';
          indicatorElement.className = 'status-dot online';
          currentProvider = 'ollama';
          currentBaseUrl = OLLAMA_BASE_URL;
          return 'ollama';
        }
      } catch (error) {
        console.log('Ollama not reachable via external URL, trying localhost...');
      }
      
      // Check Ollama localhost
      try {
        const localResponse = await fetch('http://localhost:11434/api/version');
        if (localResponse.ok) {
          statusElement.textContent = 'Ollama Local';
          indicatorElement.className = 'status-dot local';
          currentProvider = 'ollama';
          currentBaseUrl = 'http://localhost:11434';
          return 'ollama-local';
        }
      } catch (localError) {
        console.log('Ollama not available locally');
      }
      
      statusElement.textContent = 'No Providers';
      indicatorElement.className = 'status-dot offline';
      currentProvider = null;
      currentBaseUrl = null;
      return false;
    }

    async function loadModels() {
      const container = document.getElementById('models-container');
      
      try {
        const providerStatus = await checkModelProviders();
        
        if (!providerStatus) {
          container.innerHTML = '<div class="loading-state">No model providers (Ollama/LM Studio) are running or accessible</div>';
          return;
        }

        let response, data;
        
        if (currentProvider === 'cloudflare') {
          // Cloudflare AI Worker API
          response = await fetch(`${currentBaseUrl}/api/models`);
          const cfData = await response.json();
          
          // Convert Cloudflare AI format to consistent format
          data = {
            models: cfData.models.map(model => ({
              name: model.name,
              size: 0, // Cloudflare AI models are cloud-hosted
              modified: new Date().toISOString(),
              digest: 'cloudflare-' + model.name.replace(/[@\/]/g, '-'),
              provider: 'cloudflare',
              description: model.description || 'Cloudflare AI model'
            }))
          };
        } else if (currentProvider === 'lmstudio') {
          // LM Studio uses OpenAI-compatible API
          response = await fetch(`${currentBaseUrl}/v1/models`);
          const lmData = await response.json();
          
          // Convert LM Studio format to Ollama-like format
          data = {
            models: lmData.data.map(model => ({
              name: model.id,
              size: 0, // LM Studio doesn't provide size in API
              modified: new Date().toISOString(),
              digest: 'lmstudio-' + model.id.slice(0, 12)
            }))
          };
        } else {
          // Ollama API
          response = await fetch(`${currentBaseUrl}/api/tags`);
          data = await response.json();
        }
        
        if (!data.models || data.models.length === 0) {
          container.innerHTML = '<div class="loading-state">No models installed. Download some recommended models below!</div>';
          document.getElementById('model-count').textContent = '0';
          document.getElementById('total-size').textContent = '0 GB';
          return;
        }

        document.getElementById('model-count').textContent = data.models.length;
        
        // Calculate total size
        let totalBytes = 0;
        data.models.forEach(model => {
          totalBytes += model.size || 0;
        });
        const totalGB = (totalBytes / (1024 * 1024 * 1024)).toFixed(1);
        document.getElementById('total-size').textContent = `${totalGB} GB`;

        // Render models
        container.innerHTML = data.models.map(model => {
          const sizeGB = ((model.size || 0) / (1024 * 1024 * 1024)).toFixed(1);
          const modifiedDate = new Date(model.modified).toLocaleDateString();
          
          return `
            <div class="model-item">
              <div class="model-info">
                <h3>${model.name}</h3>
                <p>ID: ${model.digest.substring(0, 12)}... | Modified: ${modifiedDate}</p>
                <p>Size: ${sizeGB} GB</p>
              </div>
              <div class="model-actions">
                <button class="test-model action-btn small" data-model="${model.name}">
                  <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  Test
                </button>
                <button class="remove-model action-btn small" data-model="${model.name}" style="background: #fed7e2; color: #742a2a;">
                  <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                  Remove
                </button>
              </div>
            </div>
          `;
        }).join('');

        // Add event listeners for test and remove buttons
        container.querySelectorAll('.test-model').forEach(btn => {
          btn.addEventListener('click', (e) => testModel(e.target.dataset.model));
        });
        
        container.querySelectorAll('.remove-model').forEach(btn => {
          btn.addEventListener('click', (e) => removeModel(e.target.dataset.model));
        });

      } catch (error) {
        console.error('Error loading models:', error);
        container.innerHTML = '<div class="loading-state">Error loading models</div>';
      }
    }

    async function downloadModel(modelName) {
      const btn = document.querySelector(`[data-model="${modelName}"]`);
      const originalText = btn.textContent;
      btn.textContent = 'Downloading...';
      btn.disabled = true;
      
      try {
        if (!currentProvider || !currentBaseUrl) {
          throw new Error('No provider available');
        }

        const response = await fetch(`${currentBaseUrl}/api/pull`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ name: modelName })
        });

        if (response.ok) {
          btn.textContent = 'Downloaded!';
          btn.style.background = '#c6f6d5';
          btn.style.color = '#22543d';
          setTimeout(() => {
            loadModels(); // Refresh the list
          }, 2000);
        } else {
          throw new Error('Download failed');
        }
      } catch (error) {
        btn.textContent = 'Error';
        btn.style.background = '#fed7e2';
        btn.style.color = '#742a2a';
      }
      
      setTimeout(() => {
        btn.textContent = originalText;
        btn.disabled = false;
        btn.style.background = '';
        btn.style.color = '';
      }, 3000);
    }

    async function testModel(modelName) {
      alert(`Testing ${modelName} - this would send a test prompt to the model`);
    }

    async function removeModel(modelName) {
      if (confirm(`Are you sure you want to remove ${modelName}?`)) {
        alert(`Would remove ${modelName} - implement via ollama delete command`);
      }
    }

    async function testCloudflareModel(modelName) {
      const btn = document.querySelector(`[data-model="${modelName}"]`);
      const originalText = btn.textContent;
      btn.textContent = 'Testing...';
      btn.disabled = true;
      
      try {
        let endpoint, payload;
        
        if (modelName.includes('embedding') || modelName.includes('bge-base')) {
          // Test embedding model
          endpoint = '/test-embedding';
          payload = { text: 'Hello, this is a test embedding for Aurorion Teams AI system.' };
        } else if (modelName.includes('reranker')) {
          // Test reranker model
          endpoint = '/test-reranker';
          payload = {
            query: 'AI agent architecture',
            documents: ['AI agent system design', 'Database architecture', 'User interface components']
          };
        } else {
          // Test text generation model
          endpoint = '/test-reasoning';
          payload = {
            messages: [
              { role: 'system', content: 'You are an AI assistant for the Aurorion Teams system.' },
              { role: 'user', content: 'Explain what makes a good AI agent architecture in 2 sentences.' }
            ]
          };
        }

        const response = await fetch(`${CLOUDFLARE_AI_URL}${endpoint}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        if (response.ok) {
          const result = await response.json();
          btn.textContent = 'Success!';
          btn.style.background = '#c6f6d5';
          btn.style.color = '#22543d';
          
          // Show result in alert (could be improved with modal)
          if (result.data && Array.isArray(result.data)) {
            alert(`${modelName} Test Result: Generated ${result.data.length} dimensional embedding`);
          } else if (result.response) {
            alert(`${modelName} Test Result: ${result.response.substring(0, 200)}...`);
          } else {
            alert(`${modelName} Test Successful!`);
          }
        } else {
          throw new Error(`HTTP ${response.status}`);
        }
      } catch (error) {
        console.error('Model test failed:', error);
        btn.textContent = 'Error';
        btn.style.background = '#fed7e2';
        btn.style.color = '#742a2a';
        alert(`${modelName} test failed: ${error.message}`);
      }
      
      setTimeout(() => {
        btn.textContent = originalText;
        btn.disabled = false;
        btn.style.background = '';
        btn.style.color = '';
      }, 3000);
    }

    // Event listeners
    document.getElementById('refresh-btn').addEventListener('click', loadModels);
    
    document.getElementById('download-recommended').addEventListener('click', () => {
      if (confirm('Test Cloudflare AI models? This will run sample queries on Llama 3.1 and BGE embeddings.')) {
        testCloudflareModel('@cf/meta/llama-3.1-8b-instruct');
        setTimeout(() => testCloudflareModel('@cf/baai/bge-base-en-v1.5'), 1000);
      }
    });

    document.querySelectorAll('.download-model').forEach(btn => {
      btn.addEventListener('click', (e) => {
        downloadModel(e.target.dataset.model);
      });
    });

    document.querySelectorAll('.test-cf-model').forEach(btn => {
      btn.addEventListener('click', (e) => {
        testCloudflareModel(e.target.dataset.model);
      });
    });

    // Load models on page load
    loadModels();
    
    // Auto-refresh every 30 seconds
    setInterval(loadModels, 30000);
  </script>
</BaseLayout>